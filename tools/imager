#!/usr/bin/env zsh

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
set -o errreturn
set -o pipefail

_usage() {
  echo "Usages: "
  echo "$0 -c CSVFILE" >&2
  echo "$0 -f IMAGE -w WIDTH -h HEIGHT -t [png|jpeg|jpg]" >&2
  exit 1
}

_info() {
    # shellcheck disable=SC2059
    printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

_process-image() {
    original=${1:?"original image must be specified"}
    destination=${2:?"destination image must be specified"}
    size=${3:?"size must be specified"}
    quality=${4:?"quality must be specified"}
    colors=${5:?"colors must be specified"}
    format=${6:?"format must be specified"}

    convert -strip -quality ${quality} -resize ${size}x ${original} ${destination}

    if [[ ${format} == "png" ]]; then
        pngquant ${colors} --strip --quality ${quality} --force --ext .png ${destination}
        optipng -strip all ${destination} &> /dev/null
    else
        jpegoptim ${destination}
    fi
}


_process-csvfile() {
    local filepath=${1}
    local curdir=$(pwd -P)
    local outdir=${curdir}/processed

    for filepath cmd baselinesize format quality in "${(@s:,:)"${(f)"$(<$1)"}"}"
    {
        if [[ $cmd = "process" ]]; then
            _info "Processing ${filepath}"
            _process-images ${curdir}/orig/${filepath} ${baselinesize} ${format} ${quality}
        else
            _info "Copying ${filepath}"
            cp ${curdir}/orig/${filepath} ${outdir}/${filepath}
        fi
    }
}

_process-images() {
    local curdir=$(pwd -P)
    local outdir=${curdir}/processed

    # Create the output directory
    mkdir -p ${outdir}
    local inputfile=$1
    local baselinesize=$2
    local format=$3
    local outputfilename=$(basename "${inputfile%.*}")
    local quality=${4=85}

    declare -i size=$(( baselinesize*1 ))
    _process-image ${inputfile} ${outdir}/${outputfilename}.${format} ${size} ${quality} 256 ${format}
    declare -i size=$(( baselinesize*2 ))
    _process-image ${inputfile} ${outdir}/${outputfilename}@2x.${format} ${size} ${quality} 256 ${format}
    declare -i size=$(( baselinesize*3 ))
    _process-image ${inputfile} ${outdir}/${outputfilename}@3x.${format} ${size} ${quality} 256 ${format}
    declare -i size=$(( baselinesize*4 ))
    _process-image ${inputfile} ${outdir}/${outputfilename}@4x.${format} ${size} ${quality} 256 ${format}
}

main() {
    if [ "$#" -lt 1 ]; then
        _usage
    fi

    zparseopts -D -- c:=csvfile
    if (( ${#csvfile} == 2 )); then
        local filepath=${csvfile[2]}

        if [[ -f ${filepath} ]]; then
            _process-csvfile ${filepath}
        else
            _info "File ${filepath} does not exists"
        fi
    fi

    zparseopts -D -- f:=imagefile w:=width t:=format
    if (( ${#imagefile} == 2 )) then
        local filepath=${imagefile[2]}

        if [[ -f ${filepath} ]]; then
            _process-images ${filepath} ${width[2]} ${format[2]}
        else
            _info "File ${filepath} does not exists"
        fi
    fi
}

main "$@"
